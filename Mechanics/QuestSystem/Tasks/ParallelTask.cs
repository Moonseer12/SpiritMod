using SpiritMod.Utilities;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace SpiritMod.Mechanics.QuestSystem
{
	public class ParallelTask : QuestTask
	{
		public override string ModCallName => "Concurrent";

		private IEnumerable<QuestTask> _tasks;

		public ParallelTask() { }

		public ParallelTask(params QuestTask[] tasks)
		{
			_tasks = tasks;
		}

		public override QuestTask Parse(object[] args)
		{
			if (!QuestUtils.TryUnbox(args[1], out object[] tasks, "Concurrent Task's Tasks"))
			{
				return null;
			}

			QuestTask[] taskArray = new QuestTask[tasks.Length];
			for (int i = 0; i < tasks.Length; i++)
			{
				if (!QuestUtils.TryUnbox(tasks[i], out object[] taskArgs, "Concurrent Task's Task " + (i + 1)))
				{
					return null;
				}
				QuestTask task = QuestManager.ParseTaskFromArguments(taskArgs);
				if (task == null) return null;
				taskArray[i] = task;
			}

			return new ParallelTask(taskArray);
		}

		public override void AutogeneratedBookText(List<string> lines)
		{
			foreach (QuestTask task in _tasks)
			{
				task.GetBookText(lines);
			}
		}

		public override void AutogeneratedHUDText(List<string> lines)
		{
			foreach (QuestTask task in _tasks)
			{
				task.GetHUDText(lines);
			}
		}

		public override void ResetProgress()
		{
			base.ResetProgress();
			foreach (QuestTask task in _tasks)
			{
				task.ResetProgress();
			}
		}

		public override void Activate(Quest fromQuest)
		{
			foreach (QuestTask task in _tasks)
				task.Activate(fromQuest);
			base.Activate(fromQuest);
		}

		public override void Deactivate()
		{
			base.Deactivate();
			foreach (QuestTask task in _tasks)
			{
				task.Deactivate();
			}
		}

		public override bool CheckCompletion()
		{
			foreach (QuestTask section in _tasks)
			{
				if (!section.CheckCompletion()) return false;
			}

			return true;
		}

		public override void OnMPSyncTick()
		{
			foreach (QuestTask section in _tasks)
			{
				section.OnMPSyncTick();
			}
		}

		public override void ReadData(BinaryReader reader)
		{
			foreach (QuestTask section in _tasks)
			{
				section.ReadData(reader);
			}
		}

		public override void WriteData(BinaryWriter writer)
		{
			foreach (QuestTask section in _tasks)
			{
				section.WriteData(writer);
			}
		}
	}
}

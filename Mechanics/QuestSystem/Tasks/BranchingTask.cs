using System.Collections.Generic;
using System.IO;

namespace SpiritMod.Mechanics.QuestSystem.Tasks
{
	public class BranchingTask : QuestTask
	{
		public override string ModCallName => "##";

		private IEnumerable<QuestTask> _tasks;

		public BranchingTask() { }

		public BranchingTask(params QuestTask[] tasks)
		{
			_tasks = tasks;
		}

		public override QuestTask Parse(object[] args)
		{
			return null;
		}

		public override void AutogeneratedBookText(List<string> lines)
		{
			foreach (QuestTask task in _tasks)
			{
				task.GetBookText(lines);
			}
		}

		public override void AutogeneratedHUDText(List<string> lines)
		{
			foreach (QuestTask task in _tasks)
			{
				task.GetHUDText(lines);
			}
		}

		public override void ResetProgress()
		{
			base.ResetProgress();
			NextTask = null;
			foreach (QuestTask task in _tasks)
			{
				task.ResetProgress();
			}
		}

		public override void Activate(Quest fromQuest)
		{
			foreach (QuestTask task in _tasks)
				task.Activate(fromQuest);
			base.Activate(fromQuest);
		}

		public override void Deactivate()
		{
			foreach (QuestTask task in _tasks)
				task.Deactivate();
			base.Deactivate();
		}

		public override bool CheckCompletion()
		{
			foreach (QuestTask section in _tasks)
			{
				if (section.CheckCompletion())
				{
					NextTask = section.NextTask;
					return true;
				}
			}

			return false;
		}

		public override void OnMPSyncTick()
		{
			foreach (QuestTask section in _tasks)
			{
				section.OnMPSyncTick();
			}
		}

		public override void ReadData(BinaryReader reader)
		{
			foreach (QuestTask section in _tasks)
			{
				section.ReadData(reader);
			}
		}

		public override void WriteData(BinaryWriter writer)
		{
			foreach (QuestTask section in _tasks)
			{
				section.WriteData(writer);
			}
		}
	}
}
